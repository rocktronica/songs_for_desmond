#!/bin/bash

{

# Exit on error
set -o errexit
set -o errtrace

midi2tones=~/midi2tones/midi2tones
lengths_path="arduino/songs_for_desmond/song_lengths.h"
scores_path="arduino/songs_for_desmond/song_scores.h"
titles_path="arduino/songs_for_desmond/song_titles.h"

function stub_file() {
    path=$1

    echo "Stubbing ${path}"

    echo "#pragma once" > "${path}"
    echo >> "${path}"
    echo "// Generated by ./compile_songs.sh" >> "${path}"
    echo "// Don't edit manually!" >> "${path}"
    echo  >> "${path}"
}


stub_file $scores_path
stub_file $lengths_path
echo

function get_no_extension() {
    pathname=$1
    relative_path="$(basename $filename)"
    echo "${relative_path%.*}"
}

function get_const_stub() {
    pathname=$1
    no_extension=$(get_no_extension "${relative_path%.*}")
    echo "${no_extension}" | tr "[a-z]" "[A-Z]" | tr " " "_"
}

i=0
for filename in $PWD/midi/*.mid; do
    echo "${i}: ${filename}"

    # midi2tones has strict input expectations: no full path, no extension
    no_extension=$(get_no_extension $filename)
    input="midi/${no_extension}"
    output_path="${input}.c"

    const_stub=$(get_const_stub $filename)
    title=$(echo "${no_extension}" | tr "[a-z]" "[A-Z]" | tr "_" " ")

    echo " - Creating ${output_path}"
    $midi2tones -o2 "${input}" >/dev/null
    sed -i '' "s/score/${const_stub}_SCORE/g" "${output_path}"

    echo " - Appending to ${scores_path}"
    cat "${output_path}" | grep -v "^//" >> "${scores_path}"

    echo " - Deriving length for ${lengths_path}"
    math_string=$(
        cat "${output_path}" \
            | grep -oE ",\d+," | grep -oE "\d+" \
            | tr '\n' '+';
        echo "0"
    )
    echo "const uint16_t ${const_stub}_LENGTH = $((math_string));" \
        >> "${lengths_path}"

    echo " - Checking ${titles_path}"
    if ! grep -q $const_stub $titles_path; then
        echo "   - Stubbing ${const_stub}"
        echo >> "${titles_path}"
        echo "// TODO: move these into place" >> "${titles_path}"
        echo "  ${const_stub}_TITLE," >> "${titles_path}"
        echo "const char ${const_stub}_TITLE[] PROGMEM = \"${title}\";" \
            >> "${titles_path}"
    fi

    echo " - Deleting ${output_path}"
    rm "${output_path}"

    echo

    i=$((i + 1))
done

echo "Exposing SONG_SCORES[] and SONG_LENGTHS[]"
echo "
const uint16_t SONG_SCORES[] = {" >> "${scores_path}"
echo "
const uint16_t SONG_LENGTHS[] = {" >> "${lengths_path}"

for filename in $PWD/midi/*.mid; do
    const_stub=$(get_const_stub $filename)

    echo "  ${const_stub}_SCORE," >> "${scores_path}"
    echo "  ${const_stub}_LENGTH," >> "${lengths_path}"
done

echo "};" >> "${scores_path}"
echo "};" >> "${lengths_path}"

}

# TODO: encapsulate song stuff away from track usage
# songs_for_desmond shouldn't need so much access to compiled output
echo "Exposing compiled song order for tracks"
echo >> "${lengths_path}"
i=0
for filename in $PWD/midi/*.mid; do
    const_stub=$(get_const_stub $filename)

    echo "# define ${const_stub}    ${i}" >> "${lengths_path}"

    i=$((i + 1))
done

echo "Exposing SONGS_COUNT"
echo "
# define SONGS_COUNT     ${i}" \
    >> "${lengths_path}"